웹 애플리케이션 개발 방식 SPA/MPA (Single Page Application/Multi Page Application)

1. SPA는 단일 페이지 어플리케이션
- 단일 페이지라는건 하나의 html로 이루어진 애플리케이션을 뜻함

2. MPA는 여러 페이지 어플리케이션
- 전통적인 웹 애플리케이션인 Multi Page Application은 여러개의 페이지가 존재하고 각 페이지마다 html이 존재함

비교
SPA / MPA
HTML -  1개의 HTML/ 페이지마다 HTML 존재

HTML 로드 - 첫 진입시에 로드되고 브라우저에서 파싱 그 후에는 다시 파싱하거나 로드 안함 / 페이지를 이동할 때 마다 로드, 파싱

JS 로드
SPA - JS를 받아와서 화면을 그리고 안에 내용을 갈아치우면서 페이지가 전환 되는 것 처럼 보여줌, 
그렇기 때문에 우리 애플리케이션이 돌아가기 위해서는  모든 스크립트르르 첫 로딩시 가져옴, 
애플리케이션이 커질수록 JS 크기도 커지고 첫 페이지 로딩시 속도가 느려질 수 있음 
/
MPA - 페이지마다 필요한 리소스를 분리해서 관리할 수 있기 때문에 페이지에 필요한 스크립트만 로딩할 수 있음

MCARD 프로젝트 - SPA
네트워크탭 Doc - 눌러서 확인해보면 첫 창에서 localhost로만 받아오고 페이지를 이동해도 그대로임
Elements 탭에서 보면 페이지 전화하면 div안에 있는 내용만 바뀜
네트워크탭 JS - 눌러서 확인해보면 bundle.js 파일을 받아오는게 보이고 bundle.js안에는 다음 페이지에대한 정보도 다 들어있기 때문에 페이지를 좀 더 빠르고 부드럽게 전환할 수 있음

다음 (https://daum.net) - MPA
다음이라는 사이트는 전통적인 MPA 방식으로 동작함
네트워크탭 Doc - 눌러서 확인해보면 페이지를 이동할 때 마다 여러개의 html 파일을 받아옴, 검색을 해보면 검색 페이지를 다시 받아오고, 계속 이동할 때 마다 새롭게 HTML을 받아오고 파싱하기 때문에 SPA보다는 부자연스럽게 느껴짐
파싱하기 전에는 보여줄 수 있는 화면이 없기 때문에 긴 화면을 보여줬다가 파싱이 끝나면 그려주고 이런식의 과정을 거쳐서 MPA는 약간 깜빡거림을 느낄 수 있음

트리쉐이킹 - 이론
트리쉐이킹이란? - 사용하지 않는 불필요한 코드와 변수들을 제거해서 bundle.js 파일의 사이즈 즉, 크기를 줄이는 작업

번들사이즈를 줄였을때 우리가 얻을 수 있는 효과는 무엇일까?