- 렌더링을 방해하는 병목코드에 대해서 배워보자
우리가 사용하고 있는 자바스크립트는 싱글 스레드입니다.

쉽게말해 싱글스레드는 한가지 일 밖에 처리를 못합니다.
그래서 앞 작업이 오래 걸린다면 후속 작업에 대한 처리가 그만큼 늦어집니다.

지금 내가 작업하고 있는 프로젝트도 SPA(Single Page Application)인데 SPA도 JS로 이루어져있다.
이 JS를 가지고 와서 파싱을 한 다음에 화면에 요소를 노출하게 됩니다.
그런데 이 JS를 파싱해 나가는 과정이 굉장히 오랜 시간 쓰레드를 점유하고 있거나 아니면 앞선 작업이 쓰래드를 오랜 시간 점유하고 있다면 우리는 점점 더 느리게 페이지가 렌더링 될 겁니다.

그래서 우리는 이걸보고
어떤 코드가 얼마나 오랫동안 쓰레드를 점유하고 있는지 또는 어떤 코드가 병목 지점인지 파악할 수 있어야합니다!

우리는 이것을 파악하기 위해서 Chrome DevTools의 성능탭을 이용해볼겁니다.

이 성능탭을 사용하게되면 페이지가 처음 떴을때부터 사용자한테 노출될 때 까지의 과정을 녹화해서 어떤 부분에 어떤 코드가 작성되고 어떤 부분이 언제 실행이 되고 어느 정도의 시간이 걸리는지 파악할 수 있습니다.

그리고 성능탭은 조금 더 쉽게 성능을 분석 할 수 있도록 특정 부분마다 소요시간탭에서 가이드 라인을 지정해줍니다.

우리는 이 가이드 포인트가 어떤 의미를 가지는지 알고 있다면 조금 더 쉽게 요소들을 찾을 수 있습니다!

- 가이드 포인트
DCL: HTML 파싱이 끝났을 때 발생하는 이벤트(DOM에 대한 준비가 되었다!라는 의미로 생각하면 쉬움)
L: Load의 약자로, 우리 페이지에서 사용되고있는 모든 리소스가 다 다운받아졌을때 발생하는 이벤트 
FP, FCP: 사용자가 처음 화면을 만났을때를 의미함 (빈 화면을 쭉 보다가 첫 HTML 요소를 본 시점이라고 생각하면 쉬움)
- 우리가 프로젝트를 하면서 프로젝트 첫 렌더링 시간을 단축시켰다!라고 말했을 때 개선 포인트의 지표가 되는 부분이 FP, FCP입니다.
LCP: 우리 프로젝트에서 가장 큰 이미지 or 텍스트 덩어리가 뷰포트에 등장하는 시점을 의미함
