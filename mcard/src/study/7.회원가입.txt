회원가입 폼을 다루는 방식은 두 가지가 있는데 값을 다루는 방식에 따라 달라짐
1. Controlled
- input 값을 다루는데 있어서 state를 사용함
- 따라서 input값이 변경되면 state가 변경되면서 리렌더링 발생시킴

2. Uncontrolled
- Uncontrolled방식은 input 값을 다루는데 있어서 state를 활용하지 않고 직접 Dom에 접근해서 값을 빼오는 방식 (ref 사용)
- state 값이 변경되는게 아니므로 리렌더링이 발생하지 않음
- 상황마다 다르겠지만 Uncontrolled방식이 성능적으로 우위에 있을수도 있음


 폼을 이제 만들어볼건데 우선, 컴포넌트를 어떻게 나눌지부터 생각해야함
- 폼 밖에 만약에 다른 요소들이 아래로 쭉 있다고 해보자, 그런데 밖의 요소들은 폼 값에 대해서 궁금하지 않음
궁금한거는 폼이 유효성 검사를 다 거쳐서 완성된 값 즉, 쓸 수 있는 값만 궁금하지 변하는 과정은 궁금하지 않음
- 우린 Controlled라는 방식을 사용할건데 state가 바뀌면 다시 리렌더링이 됨 (에러메시지, disabled 처리 등을 실시간으로 계속 보여줘야하기 때문에 - Controlled 방식 채택)
그래서 아래 요소들이 불필요한 리렌더링이 발생할 수 있음
그래서 우리는 관심사의 분리를 해야함 (폼은 폼대로, 그 외의 것들은 그 외의 것 대로)

폼 유효성 검사
- yarn add validator
- yarn add -D @types/validator


어떤게 좋다는 없고 상황마다 다름
ex) form이 20개 정도 있다
어떤 버튼을 추가해서 버튼을 클릭했을때 모든 form의 값을 비워주는 기능을 구현한다고 가정해보자
1. Uncontrolled 방식
- 만약 값을 사용하고 있는 곳도 있다면 비워줘야하고
- 20개의 ref를 돌면서 값을 비워줘야함

2. Controlled 방식
- 버튼이 눌렸을때 input에 접근 하는 것보다는 state를 활용하고 있기 때문에 다시 defaultValue로 초기화 시켜주면 다시 리렌더링이 발생할거고 당시의 값은 다 비어있을거라서 input의 값이 싹 비어짐
- 그래서 Dom에 접근하지 않고도 input의 값을 비우고 사용하고 있는 값들도 리셋할 수 있음

결론
- UI적으로 상호작용이 일어난다거나 유저의 액션에 따라서 폼에 변화를 줘야 한다면 - Controlled 방식이 우세
- 상호작용은 없고 단순히 값을 받고 이거를 전달하기만 한다하면 - Uncontrolled 방식이 우세

인증처리 (Fire Auth)
- 이메일/비밀번호 인증을 사용해볼거임
- Auth, Store 두 가지를 사용 - 어떤 유저가 어떤 카드를 신청했는지 알아야하기 때문에 Auth는 인증에 대한 처리만 해주고 Store는 데이터베이스에 대한 처리만 해주는 방식
- 순서 회원가입한 유저는 Auth로 인증 절차를 거치고 통과하면 store에 저장하는 작업을 거침


폼을 firebase랑 연결
- firebase authentication => 이메일/비밀번호 클릭 => 이메일/비밀번호 사용설정 토글 만 클릭, 저장
- Form.tsx에서 폼이 관리하는 역할, 코드들이 너무 많아서 회원가입 로직은 상위 컴포넌트에서 관리 (SignupPage.tsx)