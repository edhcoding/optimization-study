캐시란 

- 자주 사용되는 데이터나 리소스 또는 무거운 연산의 결과등을 빠르게 접근 할 수 있도록 저장해두는 것 



왜 사용해야할까?

1. 데이터 접근 시간 단축

- 캐시는 저장된 데이터를 우선적으로 가져오기 때문에 원본데이터를 서버로 요청해서 가져오는 시간보다 더 빠르게 가져올 수 있다는 장점을 가지고 있습니다. 그만큼 데이터 접근 시간이 단축이 되는 거겠죠?

2. 서버의 부하 / 네트워크 비용 절감

- 저장된 데이터를 꺼내오는 것이기 때문에 원본 데이터에 대한 요청 횟수가 그만큼 줄어들게 되고

줄어든 만큼 서버에 대한 부하도 감소시키는 장점을 가집니다.



프론트엔드 개발자가 자주 사용하는 라이브러리인 Tanstack query도 서버의 요청 응답을 캐시에 두고 있기 때문에

매번 웹 서버로 요청을 하는게 아니라 저장되어 있는 데이터를 우선적으로 사용하고 캐시가 만료 되었을때만 요청을 하도록 구성이 돼있기 때문에 네트워크 트래픽이 줄고 데이터베이스의 쿼리를 질의하는 수가 감소되어서 이렇게 서버의 부하와 네트워크 비용이 절감시킬 수 있습니다는 장점이 있습니다.

https://tanstack.com/query/latest


TanStack Query

Powerful asynchronous state management, server-state utilities and data fetching. Fetch, cache, update, and wrangle all forms of async data in your TS/JS, React, Vue, Solid, Svelte & Angular applications all without touching any "global state"

tanstack.com


웹 브라우저에서는 크게 두 곳의 데이터를 저장합니다 즉, 두 곳에 캐시를 저장하는데 메모리 캐시(RAM), 디스크 캐시(하드 or SSD)가 있습니다.

표로 만들어서 살표 보겠습니다.


메모리 캐시 (RAM)	디스크 캐시 (하드 or SSD)
속도	빠름	RAM 보다 느림
용량	작음	큼
휘발성	O	X
방문시	먼저 확인	RAM 확인 후 확인


1. RAM에 저장되는 메모리 캐시는 디스크에 저장되는 디스크 캐시보다 속도가 빠릅니다.

- 그렇기 때문에 자주 접근되어지는 리소스들은 메모리 캐시에 우선적으로 저장이 됨

2. RAM의 용량은 제한적이라서 종료하게 되면 저장된 정보들이 사라집니다

3. 웹 페이지에 방문 시에 메모리 캐시를 먼저 확인하고 메모리 캐시에 저장된 정보가 없다면 디스크 캐시를 확인을 하고 디스크 캐시에도 없을 경우에는 웹 서버로 요청을 하는 과정을 거칩니다.



구글 페이지에 들어가서 Network 탭에서 Disabled cache를 꺼주고 새로고침을 하면

disk cache라고 나오는 걸 볼 수 있습니다. 이제 우리는 이게 어떤 걸 의미하는지 알 수 있겠죠??




어떤걸 메모리에 저장하고, 디스크에 저장할지는 브라우저 알고리즘에 따라 결정됩니다.



HTTP헤더를 통해서 캐시의 동작을 제어할 수 있습니다.

이것을 캐시 컨트롤 (Cache Control) 이라고 합니다.

캐시 컨트롤 헤더는 웹 리소슬를 얼마나 캐시할 것인지 아니면 언제 캐시할 것인지 언제 다시 확인할 것인지 아니면 캐시를 할 건지 말건지와 같은 정보를 나타낼 수 있습니다.

그러면 각각의 캐시 컨트롤 요소들이 어떤 것을 의미하는지 표를 보고 알아보겠습니다.



Cache Control
no-store	캐시를 사용하지 않겠다
no-cache	리소스를 사용하기 전에 항상 원래의 서버에 재검증을 요청 (이름 보고 캐시를 안하겠다가 아니라 캐시 하겠다는 거니까 주의!)
public	공유 캐시 => 예를들어서 중간에 거치는 프록시 서버나 CDN등에 캐시될 수 있음
private	공유캐시에 저장되어서는 안됨
(리소스가 특정 사용자를 위한 것이며 사용자를 위한 사설 캐시 ex) 사용자의 웹 브라우저에만 저장할 수 있다와 같은 것들을 의미)
max-age	캐시가 유효한 시간을 의미 (초 단위로 나타내며 ex) max-age 60이면 해당 리소스는 60초동안 유효하다는 의미임 이 시간이 경과하면 리소스를 더 이상 신회할 수 없기 때문에 다시 재검증 요청을 해서 새로운 버전을 가져오도록  하는 것이 max-age의 역할임)


이제 Headers에 있는 Cache-Control에 대해서 어느정도는 알 수 있습니다.


