예상치 못한 에러상황을 대비해보자
1. 에러처리가 필요한 이유
1) 안전성
- 하나의 컴포넌트가 고장나더라도 전체 애플리케이션에 영향을 미치기 때문에 갑자기 서비스가 죽을 수 있음
2) 유저 경험
- 에러가 발생했을때, 유저에게 유의미한 정보를 전달 할 수 있음
3) 로그
- 에러정보와 함께 디버깅 정보 로그시스템에 보내서 문제를 인지하고 해결 할 수 있도록 함

2. ErrorBoundary
- 하위 컴포넌트에서 발생하는 JavaScript 관련 에러감지하고, fallback UI 노출하거나 공통에서 로깅을 할 수 있도록 도와주는 클래스 컴포넌트임
- 에러가 발생한 특정 부분만 격리시키고 나머지 부분은 정상적으로 작동하게 할 수 있음

https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary