로직 추상화
1. 렌더링에 집중할 수 있는 컴포넌트 환경 만들기
렌더링에 집중 할 수 있는 컴포넌트 환경이란?
- 비즈니스 로직에 대한 코드와 화면을 그리는 컴포넌트 코드가 역할에 맞게 명확하게 분리되어있는 환경이라고 생각함
- 역할에 맞게 분리되어 있는 컴포넌트와 비즈니스로직 함수들은 재사용성에 좋고 가독성과 유지보수에 용이하고, 독립적으로 테스트하기에도 좋음

현재 상황
지금 현재 App 컴포넌트는 loading 처리도하고 error 처리도하고 데이터 패칭도 하고 있음
또 loading, error에 따라 컴포넌트를 분기해주고도 있음
그리고 또 서버에서 가져온 데이터로 화면을 그리고 있음
App 컴포넌트가 너무 많은 일을 하다보니 컴포넌트가 무거워지고 코드가 길어지고 있음 (가독성 저하, 재상용성 저하)

그래서 어떻게 할 것인가
- 데이터를 불러오는 부분을 커스텀 훅으로
- App 컴포넌트는 화면을 구성하는데 집중하도록


1) 데이터를 불러오는 부분을 커스텀 훅으로
이 부분을 들어가기에 앞서 추상화에 대해서 알아보자

추상화
- 내부의 로직과 복잡성을 감추고 사용자에게 간결하고 명확한 인터페이스를 제공하는 것
ex) const { data, isLoading, error} = useFetchTodos();
예시를 보면 이름만봐도 todos 데이터를 fetch 해올 것 같음
그런데 우리는 이 안에 함수에서 어떤식으로 데이터를 패치하고 어떻게 에러관리를 하고 어떻게 로딩처리를 하는지 우리는 궁금하지 않음
단순히 우리는 useFetchTodos라는 함수를 사용할거고 이 함수에서 반환되는 값들을 사용하는거임 - 이렇게 내부의 로직과 복잡성을 감추는것 그리고 사용자한테는 명확한 인터페이스를 제공하는것이 추상화임

2. 선언적으로 코딩하기

1) 선언적인 코드는 무엇을 뜻할까?
- 제 생각으로는 동작이 예상가능한 추상화된 코드
ex) <InView onChange={()=>{ // }}>화면에 걸렸을 때 실행</InView>
예시 코드를 보면 화면에 걸렸을 때 onChange 함수가 실행되는 코드를 작성하고 있다라고 어느정도 예상이 가는 추상화된 코드를 선언적인 코드라고 생각함

만약에 이 코드가 추상화 되어 있지 않다면 IntersectionObserver를 밖에 나와서 여러 코드들이 감춰지지 않고 직접 사용하고 있었을거임
하지만 InView라는 컴포넌트는 이런 내부 동작들을 숨키고 사용자에게 정확한 인터페이스를 제공해주는 형태를 가지고 있어서 InView라는 컴포넌트는 잘 추상화된 코드라고 생각함

2) React Suspense를 이용해서 선언적으로 loading 처리하기
그럼 우리는 React의 Suspense를 이용해서 선언적으로 loading 처리를 해볼거임
https://react.dev/reference/react/Suspense

Suspense라고 하는 React Hook은 자식 요소가 아직 로드중이거나 아니면 자식요소에서 에러를 던지는 경우에 대비해서 대체 UI를 보여주는 역할을 함
Suspense라는 뜻이 아직 완성되지 않은, 미완성인 상태를 뜻 함 - 이름으로도 어느정도 동작이 유추가능함
내부 자식이 아직 뭔가 완성되지 않았고 로드되지 않았다면 이 fallback 요소를 그려줘라! 라고 하고 있어서 데이터를 불러오기전에 로딩 화면을 보여줘서 보다 선언적으로 로딩을 하는 방법을 알아보자!

useSuspenseQuery랑 같이사용

3) React Query를 사용해서 서버 상태 관리하기
React Query란?
- 서버 상태를 관리하는 라이브러리임
- 선언적으로 에러, 로딩등을 관리할 수 있음
- 캐싱, 값 업데이트등 비동기 과정을 보다 더 편하게 처리할 수 있음

https://tanstack.com/

설치 방법
yarn add @tanstack/react-query
yarn add @tanstack/react-query-devtools

이제 data fetching 해주는 useWedding에 적용시켜보자