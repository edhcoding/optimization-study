로직 추상화
1. 렌더링에 집중할 수 있는 컴포넌트 환경 만들기
렌더링에 집중 할 수 있는 컴포넌트 환경이란?
- 비즈니스 로직에 대한 코드와 화면을 그리는 컴포넌트 코드가 역할에 맞게 명확하게 분리되어있는 환경이라고 생각함
- 역할에 맞게 분리되어 있는 컴포넌트와 비즈니스로직 함수들은 재사용성에 좋고 가독성과 유지보수에 용이하고, 독립적으로 테스트하기에도 좋음

현재 상황
지금 현재 App 컴포넌트는 loading 처리도하고 error 처리도하고 데이터 패칭도 하고 있음
또 loading, error에 따라 컴포넌트를 분기해주고도 있음
그리고 또 서버에서 가져온 데이터로 화면을 그리고 있음
App 컴포넌트가 너무 많은 일을 하다보니 컴포넌트가 무거워지고 코드가 길어지고 있음 (가독성 저하, 재상용성 저하)

그래서 어떻게 할 것인가
- 데이터를 불러오는 부분을 커스텀 훅으로
- App 컴포넌트는 화면을 구성하는데 집중하도록


1) 데이터를 불러오는 부분을 커스텀 훅으로
이 부분을 들어가기에 앞서 추상화에 대해서 알아보자

추상화
- 내부의 로직과 복잡성을 감추고 사용자에게 간결하고 명확한 인터페이스를 제공하는 것
ex) const { data, isLoading, error} = useFetchTodos();
예시를 보면 이름만봐도 todos 데이터를 fetch 해올 것 같음
그런데 우리는 이 안에 함수에서 어떤식으로 데이터를 패치하고 어떻게 에러관리를 하고 어떻게 로딩처리를 하는지 우리는 궁금하지 않음
단순히 우리는 useFetchTodos라는 함수를 사용할거고 이 함수에서 반환되는 값들을 사용하는거임 - 이렇게 내부의 로직과 복잡성을 감추는것 그리고 사용자한테는 명확한 인터페이스를 제공하는것이 추상화임

2. 선언적으로 코딩하기